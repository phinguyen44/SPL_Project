next
}
rm(ModelElement) # clean up
next
}
wald.log = list() # Save Wald Test Output
for(i in 1:length(allModels)){
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(wald.test(b = coef(ModelElement), Sigma = vcov(ModelElement), Terms = 16:19)$result)
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
wald.bound = t(as.data.frame(wald.log))
modelNames = names(allModels)
wald.df = data.frame(modelNames, wald.bound)
wald.log = list() # Save Wald Test Output
for(i in 1:length(allModels)){
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(wald.test(b = coef(ModelElement), Sigma = vcov(ModelElement), Terms = health)$result)
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
wald.bound = t(as.data.frame(wald.log))
modelNames = names(allModels)
wald.df = data.frame(modelNames, wald.bound)
View(wald.df)
theta_est_t= t(allSummaries$AUT.FEMALE$coefficients[,16:19])
theta_est  = allSummaries$AUT.FEMALE$coefficients[,16:19]
allSummaries$AUT.FEMALE$coefficients
vcov(allSummaries$AUT.FEMALE
vcov(allSummaries$AUT.FEMALE)
m = allSummaries$AUT.FEMALE$coefficients
View(m)
m = allSummaries$AUT.FEMALE$coefficients
View(m)
Var_est_theta_inv = solve(vcov(allSummaries$AUT.FEMALE))
View(Var_est_theta_inv)
vcov(allSummaries$AUT.FEMALE)
m = vcov(allSummaries$AUT.FEMALE)
m
View(m)
theta_est_t= t(allSummaries$AUT.FEMALE$coefficients[16:19,1])
theta_est  = allSummaries$AUT.FEMALE$coefficients[16:19,1]
Var_est_theta_inv = solve(vcov(allSummaries$AUT.FEMALE))
W = theta_est_t %*% Var_est_theta_inv %*% theta_est
theta_est_t= t(allSummaries$AUT.FEMALE$coefficients[16:19,1])
theta_est  = allSummaries$AUT.FEMALE$coefficients[16:19,1]
Var_est_theta_inv = solve(vcov(allSummaries$AUT.FEMALE)[16:19, 16:19])
W = theta_est_t %*% Var_est_theta_inv %*% theta_est
W
g$result
g = wald.test(b = coef(allModels$AUT.FEMALE), Sigma = vcov(allModels$AUT.FEMALE), Terms = 1:23)
W
g$result
g = wald.test(b = coef(allModels$AUT.FEMALE), Sigma = vcov(allModels$AUT.FEMALE), Terms = 16:19)
W
g$result
View(wald.df)
wald.test(b = coef(allModels[[14]]), Sigma = vcov(allModels[[14]]), Terms = 16:19
n
wald.test(b = coef(allModels[[14]]), Sigma = vcov(allModels[[14]]), Terms = 16:19)
coef(allModels[[14]])
vcov(allModels[[14]])
coef(allModels[[14]])[[1]]
coef(allModels[[14]])[[c(1:14, 16:23)]]
coef(allModels[[14]])[[c(1:14)]]
coef(allModels[[14]])[[1:14]]
typeof(coef(allModels[[14]]))
typeof(coef(allModels))
typeof(coef(allModels[[14]]))
z = coef(allModels[[14]])
z
coef(allModels[[14]])[[!15]]
typeof(z)
z = z[[!15]]
z = z[[-15]]
k = c(rep("TRUE", 14), "FALSE", rep(TRUE, 8))
z[k]
k[z]
z[[k]]
as.vector(z)
as.vector(z)[k]
k
l = as.vector(z)
l[k]
t(l)[k]
joint.wald.test = function(theta, model.summary, spec, signf.l){
hessian_inv = vcov(model.summary)
W = t(theta) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W; joint.wald.test[2] = chi2; joint.wald.test[3]
= pval
WaldTest
}
joint.wald.test = function(theta, model.summary, spec, signf.l){
hessian_inv = vcov(model.summary)
W = t(theta) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W; joint.wald.test[2] = chi2; joint.wald.test[3]
= pval
joint.wald.test
}
joint.wald.test = function(theta, model.summary, spec, signf.l){
hessian_inv = vcov(model.summary)
W = t(theta) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W; joint.wald.test[2] = chi2; joint.wald.test[3]
= pval
joint.wald.test
}
W = t(theta_est) %*% Var_est_theta_inv %*% theta_est
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(3)
names(joint.wald.test) = c("W","df","p-value", "df") = numeric(4)
hessian_inv = vcov(model.summary)
W = t(theta) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W; joint.wald.test[2] = chi2; joint.wald.test[3]
= pval; joint.wald.test[4]
joint.wald.test
}
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(4)
names(joint.wald.test) = c("W","df","p-value", "df") = numeric(4)
hessian_inv = vcov(model.summary)
W = t(theta) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W; joint.wald.test[2] = chi2; joint.wald.test[3]
= pval; joint.wald.test[4]
joint.wald.test
}
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(4)
names(joint.wald.test) = c("W","df","p-value", "df")
hessian_inv = vcov(model.summary)
W = t(theta) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W; joint.wald.test[2] = chi2; joint.wald.test[3]
= pval; joint.wald.test[4]
joint.wald.test
}
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(4)
names(joint.wald.test) = c("W","df","p-value", "df")
hessian_inv = vcov(model.summary)
W = t(theta) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W; joint.wald.test[2] = chi2; joint.wald.test[3]
= pval; joint.wald.test[4]
joint.wald.test
}
W = t(theta_est) %*% Var_est_theta_inv %*% theta_est
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(4)
names(joint.wald.test) = c("W","df","p-value", "df")
hessian_inv = vcov(model.summary)
W = t(theta) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W
joint.wald.test[2] = chi2
joint.wald.test[3] = pval
joint.wald.test[4] = spec
joint.wald.test
}
joint.wald.test(allSummaries$AUT.FEMALE$coefficients, allSummaries$AUT.FEMALE, 16:19, 0.95)
W = t(theta_est) %*% Var_est_theta_inv %*% theta_est
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(4)
names(joint.wald.test) = c("W","df","p-value", "df")
hessian_inv = vcov(model.summary)
W = t(theta[spec,1]) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W
joint.wald.test[2] = chi2
joint.wald.test[3] = pval
joint.wald.test[4] = spec
joint.wald.test
}
joint.wald.test(allSummaries$AUT.FEMALE$coefficients, allSummaries$AUT.FEMALE, 16:19, 0.95)
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(4)
names(joint.wald.test) = c("W","chi2","p-value", "df")
hessian_inv = vcov(model.summary)
W = t(theta[spec,1]) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W
joint.wald.test[2] = chi2
joint.wald.test[3] = pval
joint.wald.test[4] = spec
joint.wald.test
}
joint.wald.test(allSummaries$AUT.FEMALE$coefficients, allSummaries$AUT.FEMALE, 16:19, 0.95)
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(4)
names(joint.wald.test) = c("W","chi2","p-value", "df")
hessian_inv = vcov(model.summary)
W = t(theta[spec,1]) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W
joint.wald.test[2] = chi2
joint.wald.test[3] = pval
joint.wald.test[4] = lenght(spec)
joint.wald.test
}
joint.wald.test(allSummaries$AUT.FEMALE$coefficients, allSummaries$AUT.FEMALE, 16:19, 0.95)
joint.wald.test(allSummaries$AUT.FEMALE$coefficients, allSummaries$AUT.FEMALE, 16:19, 0.95)
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(4)
names(joint.wald.test) = c("W","chi2","p-value", "df")
hessian_inv = vcov(model.summary)
W = t(theta[spec,1]) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=spec)
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W
joint.wald.test[2] = chi2
joint.wald.test[3] = pval
joint.wald.test[4] = length(spec)
joint.wald.test
}
joint.wald.test(allSummaries$AUT.FEMALE$coefficients, allSummaries$AUT.FEMALE, 16:19, 0.95)
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(4)
names(joint.wald.test) = c("W","chi2","p-value", "df")
hessian_inv = vcov(model.summary)
W = t(theta[spec,1]) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=length(spec))
pval = 1-pchisq(W,spec)
joint.wald.test[1] = W
joint.wald.test[2] = chi2
joint.wald.test[3] = pval
joint.wald.test[4] = length(spec)
joint.wald.test
}
joint.wald.test(allSummaries$AUT.FEMALE$coefficients, allSummaries$AUT.FEMALE, 16:19, 0.95)
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(4)
names(joint.wald.test) = c("W","chi2","p-value", "df")
hessian_inv = vcov(model.summary)
W = t(theta[spec,1]) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=length(spec))
pval = 1-pchisq(W,length(spec))
joint.wald.test[1] = W
joint.wald.test[2] = chi2
joint.wald.test[3] = pval
joint.wald.test[4] = length(spec)
joint.wald.test
}
joint.wald.test(allSummaries$AUT.FEMALE$coefficients, allSummaries$AUT.FEMALE, 16:19, 0.95)
g = wald.test(b = coef(allModels$AUT.FEMALE), Sigma = vcov(allModels$AUT.FEMALE), Terms = 16:19)
W
g$result
W = t(theta_est) %*% Var_est_theta_inv %*% theta_est
joint.wald.test = function(theta, model.summary, spec, signf.l){
joint.wald.test= numeric(3)
names(joint.wald.test) = c("W","p-value", "df")
hessian_inv = vcov(model.summary)
W = t(theta[spec,1]) %*% solve(hessian_inv[spec,spec]) %*% theta[spec,1]
chi2 = qchisq(signf.l, df=length(spec))
pval = 1-pchisq(W,length(spec))
joint.wald.test[1] = W
joint.wald.test[2] = pval
joint.wald.test[3] = length(spec)
joint.wald.test
}
joint.wald.test(allSummaries$AUT.FEMALE$coefficients, allSummaries$AUT.FEMALE, 16:19, 0.95)
joint.wald.test(allSummaries$CHE.MALE$coefficients, allSummaries$CHE.MALE, 16:19, 0.95)
allSummaries$CHE.MALE$coefficients
allModels$AUT.MALE$coefficients
allModels$CHE.MALE$coefficients
wald.log = list() # Save Wald Test Output
for(i in 1:length(allSummaries)){
# Get Element
ModelElement = allSummaries[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(wald.test(b = coef(ModelElement), Sigma = vcov(ModelElement), Terms = health)$result)
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
rm(list= ls()[!(ls() %in% c("df.reg", "df.splits"))])
neededPackages = c("aod", "devtools")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
if(!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
lapply(neededPackages, library, character.only = TRUE)
allModels = lapply(df.splits, function(z){
z = z[-z$age50] # Multicollinearity
model = glm(z$labor_participationTRUE ~., family = binomial(link = "probit"), data = z)
return(model)
})
allSummaries = lapply(allModels, summary)
wald.log = list() # Save Wald Test Output
for(i in 1:length(allModels)){
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(wald.test(b = coef(ModelElement), Sigma = vcov(ModelElement), Terms = health)$result)
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
wald.bound = t(as.data.frame(wald.log))
modelNames = names(allModels)
wald.df = data.frame(modelNames, wald.bound)
wald.log = list(length(allModels))
wald.log = list()
listnames(wald.log) = names(allModels)
names(wald.log) = names(allModels)
for(i in 1:length(allModels)){
# Save Wald Test Output
wald.log = list(1:length(allModels))
names(wald.log) = names(allModels)
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(wald.test(b = coef(ModelElement), Sigma = vcov(ModelElement), Terms = health)$result)
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
wald.log = list(1:length(allModels))
names(wald.log) = names(allModels)
wald.log = list(, 11))
for(i in 1:length(allModels)){
# Save Wald Test Output
wald.log = list()
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(wald.test(b = coef(ModelElement), Sigma = vcov(ModelElement), Terms = health)$result)
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
for(i in 1:length(allModels)){
# Save Wald Test Output
wald.log = list()
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(wald.test(b = coef(ModelElement), Sigma = vcov(ModelElement), Terms = health)$result)
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
wald.log = list() # Save Wald Test Output
for(i in 1:length(allModels)){
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(wald.test(b = coef(ModelElement), Sigma = vcov(ModelElement), Terms = health)$result)
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
wald.bound = t(as.data.frame(wald.log))
modelNames = names(allModels)
wald.df = data.frame(modelNames, wald.bound)
vcov(allModels$AUT.FEMALE)
$latex {\bf M\_mean} = \begin{bmatrix}
mat.mean = mean(allModels$AUT.FEMALE$coefficients)
test = vcov(allModels$AUT.FEMALE)
View(test)
allModels$AUT.FEMALE$coefficients
sigma = allSummaries$AUT.FEMALE
allSummaries$AUT.FEMALE
sigma = (340.20)^2
sigma = (340.20)^2
X = allModels$AUT.FEMALE$data
test2 = sigma %*% (t(X) %*% X)
test2 = sigma (t(X) %*% X)
View(X)
X = as.matrix(allModels$AUT.FEMALE$data)
test2 = sigma (t(X) %*% X)
test2 = sigma * (t(X) %*% X)
View(test2)
t(X) %*% X
test2 = sigma * (solve(t(X) %*% X))
View(test2)
solve(t(X) %*% X)
sigma = (340.20)
test2 = sigma*(solve(t(X) %*% X))
allModels$AUT.FEMALE$sigma
allModels$AUT.FEMALE$residuals
length(allModels$AUT.FEMALE$residuals)
k= (allModels$AUT.FEMALE$residuals)
m= mean(allModels$AUT.FEMALE$residuals)
z = (k-m)^2
k^2
SSR = k^2
SSR^0.5
SSR = sum(SSR)
SSR^.05
sigma = 1.40372
X = as.matrix(allModels$AUT.FEMALE$data)
test2 = sigma*(solve(t(X) %*% X))
