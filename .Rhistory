# TODO: Comment in report: mention it gives same results as inbuilt function
# (scale)
# Gives a vector of integer column positions of numeric variables
idx = sapply(df.out, is.numeric)
idx = seq(1:length(idx))[idx]
# Creating separate data set with standardized numeric variables for regression,
# then reselect variables as described in paper (e.g. self-reported health is
# removed)
df.reg = df.out %>%
mutate_at(.vars = vars(idx),
.funs = standardize) %>%
mutate(labor_participation = !labor_np) %>% # invert to get labor_part rate
select(country, gender, age,
h_chronic, h_adla, h_obese, h_maxgrip,
edu_second, edu_high, children, couple,
labor_participation)
# Create a list of data frames by country and gender, to be used in regression
df.splits  = split(df.reg, f = list(df.reg$country, df.reg$gender), drop = TRUE)
# Create necessary dummary variables for regression
dummify = function(data.frame) {
data.frame = data.frame %>%
select(-country, -gender)                # remove country/gender
model      = ~ 0 + .                         # needed to remove intercept
new.df     = model.matrix(model, data.frame) # create dummies
new.df     = data.frame(new.df)
return(new.df)
}
df.splits = lapply(df.splits, dummify)
# df.out is for analysis, df.reg and df.splits are for estimation
rm(list= ls()[!(ls() %in% c("df.out", "df.splits", "df.reg"))])
rm(list= ls()[!(ls() %in% c("df.reg", "df.splits"))])
# List all packages needed for session
neededPackages = c("aod")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if(!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, library, character.only = TRUE)
################################################################################
# Probit for each country and gender
allModels = lapply(df.splits, function(z){
z = z[-z$age50] # Multicollinearity
model = glm(z$labor_participationTRUE ~., family = binomial(link = "probit"), data = z)
return(model)
})
# Return summaries
allSummaries = lapply(allModels, summary)
# Wald Test
wald.log = list() # Save Wald Test Output
for(i in 1:length(allModels)){
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(wald.test(b = coef(ModelElement), Sigma = vcov(ModelElement), Terms = health)$result)
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
wald.bound = t(as.data.frame(wald.log))
modelNames = names(allModels)
wald.df = data.frame(modelNames, wald.bound)
############ Create our own Wald Test ###############
############ First get results from waldtest packes for female Austrian ###########
library(aod)
library(numDeriv)
## Multivariate Case for Wald Test
R = matrix(0, nrow = 23, ncol = 23)
coef.H0 = c(16:19) # Coefficients to be tested
# Assign restrictions to R and r
for (i in min(coef.H0):max(coef.H0)){ R[i,i] = 1}
r = rep(0, length(coef.H0))
theta = allSummaries$AUT.FEMALE$coefficients
R %*% b
#=> our test statistics reduces to:
# W = (theta_est - theta_zero)' [Var_est(theta_est)]^(-1)*theta_est - theta_zero)
#   = (theta_est)' *[Var_est(theta_est)]^(-1)* (theta_est)
########## Construct a Wald Test for joint significance ################
# W = t(theta_est) %*% [Var_theta_est]^(-1) %*% theta_est
joint.wald.test = function(model.summary, spec, signf.l){
# Define test elements
joint.wald.test= numeric(6)
names(joint.wald.test) = c("Name","W","p-value", "df", "H0" , "Decision")
beta = model.summary$coefficients[,1]
Var_beta_est = vcov(model.summary)
# Wald test statistic
W = t(beta[spec]) %*% solve(Var_beta_est[spec,spec]) %*% beta[spec]
# Set up test output
chi2 = qchisq(signf.l, df=length(spec))
pval = 1-pchisq(W,length(spec))
joint.wald.test[1] = "Chi2 test"
joint.wald.test[2] = format(   W, digits = 4)
joint.wald.test[3] = format(pval, digits = 4)
joint.wald.test[4] = length(spec)
joint.wald.test[5] = "All coef. equal to 0"
joint.wald.test[6] = ifelse(pval <= 1- signf.l, "Reject H0", "Cannot reject H0")
joint.wald.test
}
joint.wald.test(allSummaries$AUT.FEMALE, 16:19, 0.95)
wald.test(b = coef(allModels$AUT.FEMALE), Sigma = vcov(allModels$AUT.FEMALE), Terms = 16:19)
allModels = lapply(df.splits, function(z){
z = z[-z$age50] # Multicollinearity
model = glm(z$labor_participationTRUE ~., family = binomial(link = "probit"), data = z)
return(model)
})
allSummaries = lapply(allModels, summary)
wald.log = list() # Save Wald Test Output
for(i in 1:length(allModels)){
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(joint.wald.test(ModelElement, 16:19, 0.95))
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
allModels = lapply(df.splits, function(z){
z = z[-z$age50] # Multicollinearity
model = glm(z$labor_participationTRUE ~., family = binomial(link = "probit"), data = z)
return(model)
})
allSummaries = lapply(allModels, summary)
wald.log = list() # Save Wald Test Output
for(i in 1:length(allModels)){
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(joint.wald.test(allSummaries[[i]], 16:19, 0.95))
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
wald.bound = t(as.data.frame(wald.log))
modelNames = names(allModels)
wald.df = data.frame(modelNames, wald.bound)
View(wald.df)
joint.wald.test(allSummaries$DEU.FEMALE, 16:19, 0.95)
View(df.reg)
allSummaries$DEU.FEMALE$coefficients
allSummaries = lapply(allModels, summary)
wald.log = list() # Save Wald Test Output
for(i in 1:length(allModels)){
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(wald.test(b = coef(ModelElement), Sigma = vcov(ModelElement), Terms = health)$result)
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
wald.bound = t(as.data.frame(wald.log))
modelNames = names(allModels)
View(wald.df)
wald.df = data.frame(modelNames, wald.bound)
View(wald.df)
allSummaries$CHE.FEMALE
getwd()
rm(list= ls()[!(ls() %in% c("df.reg", "df.splits"))])
neededPackages = c("aod")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
if(!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
lapply(neededPackages, library, character.only = TRUE)
allModels = lapply(df.splits, function(z){
z = z[-z$age50] # Multicollinearity
model = glm(z$labor_participationTRUE ~., family = binomial(link = "probit"), data = z)
return(model)
})
allSummaries = lapply(allModels, summary)
wald.log = list() # Save Wald Test Output
for(i in 1:length(allModels)){
# Get Element
ModelElement = allModels[[i]]
# Specify the of coefficients to be tested: only health variable
health = c(16:19)
# Test only the joint significance of health variables
# TODO: select health coefficients in a more efficient manner -> some Models have less coefficients
testOutput = try(wald.test(b = coef(ModelElement), Sigma = vcov(ModelElement), Terms = health)$result)
if(class(testOutput) == "try-error"){
# Display warning and investigate
msg = paste0("Wald Test failed for Model Element ", i)
warning(msg)
wald.log[[i]] = "Error"
next
} else{
wald.log[[i]] = testOutput
next
}
rm(ModelElement) # clean up
next
}
wald.bound = t(as.data.frame(wald.log))
modelNames = names(allModels)
wald.df = data.frame(modelNames, wald.bound)
library(aod)
library(numDeriv)
R = matrix(0, nrow = 23, ncol = 23)
coef.H0 = c(16:19) # Coefficients to be tested
for (i in min(coef.H0):max(coef.H0)){ R[i,i] = 1}
r = rep(0, length(coef.H0))
theta = allSummaries$AUT.FEMALE$coefficients
joint.wald.test = function(model.summary, spec, signf.l){
# Define test elements
joint.wald.test= numeric(6)
names(joint.wald.test) = c("Name","W","p-value", "df", "H0" , "Decision")
beta = model.summary$coefficients[,1]
Var_beta_est = vcov(model.summary)
# Wald test statistic
W = t(beta[spec]) %*% solve(Var_beta_est[spec,spec]) %*% beta[spec]
# Set up test output
chi2 = qchisq(signf.l, df=length(spec))
pval = 1-pchisq(W,length(spec))
joint.wald.test[1] = "Chi2 test"
joint.wald.test[2] = format(   W, digits = 4)
joint.wald.test[3] = format(pval, digits = 4)
joint.wald.test[4] = length(spec)
joint.wald.test[5] = "All coef. equal to 0"
joint.wald.test[6] = ifelse(pval <= 1- signf.l, "Reject H0", "Cannot reject H0")
joint.wald.test
}
joint.wald.test(allSummaries$AUT.FEMALE, 16:19, 0.95)
wald.test(b = coef(allModels$AUT.FEMALE), Sigma = vcov(allModels$AUT.FEMALE), Terms = 16:19)
k = 23
R = diag()
r = rep(0, length(k))
general.wald.test = function(model.summary, signf.l, R = NULL, r = NULL){
# Define test elements
general.wald.test= numeric(6)
names(general.wald.test) = c("Name","W","p-value", "df", "H0" , "Decision")
beta = model.summary$coefficients[, 1]
Var_beta_est = vcov(model.summary)
R = if (is.null(R)){
R = diag(1, length(beta))
} else {return(R)}
r = if (is.null(r)){
r = rep(0, length(beta))
} else {return(r)}
# Wald test statistic
W = t(R%*%beta - r) %*% solve(R%*% Var_beta_est %*% t(R)) %*% (R%*%beta - r)
# Set up test output
chi2 = qchisq(signf.l, df=length(r))
pval = 1-pchisq(W,length(r))
general.wald.test[1] = "Chi2 test"
general.wald.test[2] = format(   W, digits = 4)
general.wald.test[3] = format(pval, digits = 4)
general.wald.test[4] = length(r)
general.wald.test[5] = "R*b = r"
general.wald.test[6] = ifelse(pval <= 1- signf.l, "Reject H0", "Cannot reject H0")
general.wald.test
}
general.wald.test(allSummaries$AUT.FEMALE, 0.95)
R = diag(0, 23)
B[1,1] = 1
R[1,1] = 1
R[1,2] = 1
C = rep(0, 1)
r = rep(0, 1)
R = diag(0, 23)
R[1,2] = 1
R[1,1] = 1
general.wald.test = function(model.summary, signf.l, R = NULL, r = NULL){
# Define test elements
general.wald.test= numeric(6)
names(general.wald.test) = c("Name","W","p-value", "df", "H0" , "Decision")
beta = model.summary$coefficients[, 1]
Var_beta_est = vcov(model.summary)
R = if (is.null(R)){
R = diag(1, length(beta))
} else {return(R)}
r = if (is.null(r)){
r = rep(0, length(beta))
} else {return(r)}
# Wald test statistic
W = t(R%*%beta - r) %*% solve(R%*% Var_beta_est %*% t(R)) %*% (R%*%beta - r)
# Set up test output
chi2 = qchisq(signf.l, df=length(r))
pval = 1-pchisq(W,length(r))
general.wald.test[1] = "Chi2 test"
general.wald.test[2] = format(   W, digits = 4)
general.wald.test[3] = format(pval, digits = 4)
general.wald.test[4] = length(r)
general.wald.test[5] = "R*b = r"
general.wald.test[6] = ifelse(pval <= 1- signf.l, "Reject H0", "Cannot reject H0")
general.wald.test
}
general.wald.test(allSummaries$AUT.FEMALE, 0.95)
joint.wald.test(allSummaries$AUT.FEMALE, 16:19, 0.95)
joint.wald.test = function(model.summary, spec, signf.l){
# Define test elements
joint.wald.test= numeric(6)
names(joint.wald.test) = c("Name","W","p-value", "df", "H0" , "Decision")
beta = model.summary$coefficients[,1]
Var_beta_est = vcov(model.summary)
# Wald test statistic
W = t(beta[spec]) %*% solve(Var_beta_est[spec,spec]) %*% beta[spec]
# Set up test output
chi2 = qchisq(signf.l, df=length(spec))
pval = 1-pchisq(W,length(spec))
joint.wald.test[1] = "Chi2 test"
joint.wald.test[2] = format(   W, digits = 4)
joint.wald.test[3] = format(pval, digits = 4)
joint.wald.test[4] = length(spec)
joint.wald.test[5] = "b equal to 0"
joint.wald.test[6] = ifelse(pval <= 1- signf.l, "Reject H0", "Cannot reject H0")
joint.wald.test
}
joint.wald.test(allSummaries$AUT.FEMALE, 16:19, 0.95)
wald.test(b = coef(allModels$AUT.FEMALE), Sigma = vcov(allModels$AUT.FEMALE), Terms = 16:19)
general.wald.test = function(model.summary, signf.l, R = NULL, r = NULL){
# Define test elements
general.wald.test= numeric(6)
names(general.wald.test) = c("Name","W","p-value", "df", "H0" , "Decision")
beta = model.summary$coefficients[, 1]
Var_beta_est = vcov(model.summary)
# Set up restriction matrix/vector for linear hypothesis
R = if (is.null(R)){
R = diag(1, length(beta))
} else {R = R}
r = if (is.null(r)){
r = rep(0, length(beta))
} else {r = r}
# Wald test statistic
W = t(R%*%beta - r) %*% solve(R%*% Var_beta_est %*% t(R)) %*% (R%*%beta - r)
# Set up test output
chi2 = qchisq(signf.l, df=length(r))
pval = 1-pchisq(W,length(r))
general.wald.test[1] = "Chi2 test"
general.wald.test[2] = format(   W, digits = 4)
general.wald.test[3] = format(pval, digits = 4)
general.wald.test[4] = length(r)
general.wald.test[5] = "R*b = r"
general.wald.test[6] = ifelse(pval <= 1- signf.l, "Reject H0", "Cannot reject H0")
general.wald.test
}
general.wald.test(allSummaries$AUT.FEMALE, 0.95)
R = diag(0, 23)
R[1,1] = 1
R[1,2] = 1
r = rep(0, 1)
general.wald.test(allSummaries$AUT.FEMALE, 0.95, R, r)
?ifelse
?if
else
?if
)
general.wald.test = function(model.summary, signf.l, R = NULL, r = NULL){
# Define test elements
general.wald.test= numeric(6)
names(general.wald.test) = c("Name","W","p-value", "df", "H0" , "Decision")
beta = model.summary$coefficients[, 1]
Var_beta_est = vcov(model.summary)
# Set up restriction matrix/vector for linear hypothesis
R = if (is.null(R)){
R = diag(1, length(beta))
} else {R = R}
r = if (is.null(r)){
r = rep(0, length(beta))
} else {r = r}
# Wald test statistic
W = t(R%*%beta - r) %*% solve(R%*% Var_beta_est %*% t(R)) %*% (R%*%beta - r)
# Set up test output
chi2 = qchisq(signf.l, df=length(r))
pval = 1-pchisq(W,length(r))
general.wald.test[1] = "Chi2 test"
general.wald.test[2] = format(   W, digits = 4)
general.wald.test[3] = format(pval, digits = 4)
general.wald.test[4] = length(r)
general.wald.test[5] = "R*b = r"
general.wald.test[6] = ifelse(pval <= 1- signf.l, "Reject H0", "Cannot reject H0")
general.wald.test
}
general.wald.test(allSummaries$AUT.FEMALE, 0.95, R, r)
R = diag(0, 23)
R[1,1] = 1
R[1,2] = 1
R
general.wald.test = function(model.summary, signf.l, R = NULL, r = NULL){
# Define test elements
general.wald.test= numeric(6)
names(general.wald.test) = c("Name","W","p-value", "df", "H0" , "Decision")
beta = model.summary$coefficients[, 1]
Var_beta_est = vcov(model.summary)
# Set up restriction matrix/vector for linear hypothesis
R = if (is.null(R)){
R = diag(1, length(beta))
} else {
R = R}
r = if (is.null(r)){
r = rep(0, length(beta))
} else {
r = r}
# Wald test statistic
W = t(R%*%beta - r) %*% solve(R%*% Var_beta_est %*% t(R)) %*% (R%*%beta - r)
# Set up test output
chi2 = qchisq(signf.l, df=length(r))
pval = 1-pchisq(W,length(r))
general.wald.test[1] = "Chi2 test"
general.wald.test[2] = format(   W, digits = 4)
general.wald.test[3] = format(pval, digits = 4)
general.wald.test[4] = length(r)
general.wald.test[5] = "R*b = r"
general.wald.test[6] = ifelse(pval <= 1- signf.l, "Reject H0", "Cannot reject H0")
general.wald.test
}
general.wald.test(allSummaries$AUT.FEMALE, 0.95)
R = diag(0, 23)
R[1,1] = 1
R[1,2] = 1
r = rep(0, 1)
general.wald.test(allSummaries$AUT.FEMALE, 0.95, R, r)
R%*%vcov(allSummaries$AUT.FEMALE)
R%*%vcov(allSummaries$AUT.FEMALE)t(R)
R%*%vcov(allSummaries$AUT.FEMALE)%*%t(R)
I= solve(R%*%vcov(allSummaries$AUT.FEMALE)%*%t(R))
I= (R%*%vcov(allSummaries$AUT.FEMALE)%*%t(R))
View(I)
R = if (is.null(R)){
R = diag(1, length(beta))
} else {
R = R}
R%*%vcov(allSummaries$AUT.FEMALE)
R[1,2] = 1
R%*%vcov(allSummaries$AUT.FEMALE)
View(R)
n = R%*%vcov(allSummaries$AUT.FEMALE)
View(n)
n %*% t(R)
M = n %*% t(R)
solve(M)
eigen(M)
R[1,4] = 1
r = rep(0, 1)
general.wald.test(allSummaries$AUT.FEMALE, 0.95, R, r)
R = diag(0, 23)
R[1,1] = 1
R[1,4] = 1
r = rep(0, 23)
general.wald.test(allSummaries$AUT.FEMALE, 0.95, R, r)
R%*% Var_beta_est %*% t(R))
R%*% Var_beta_est %*% t(R)
Var_beta_est = vcov(allSummaries$AUT.FEMALE)
R%*% Var_beta_est %*% t(R)
solve(R%*% Var_beta_est %*% t(R))
R[2,1] = 1
R[2,4] = 1
r = rep(0, 23)
general.wald.test(allSummaries$AUT.FEMALE, 0.95, R, r)
solve(R%*% Var_beta_est %*% t(R))
(R%*% Var_beta_est %*% t(R)
)
R[5,5] = 1
R[5,4] = 1
(R%*% Var_beta_est %*% t(R))
solve(R%*% Var_beta_est %*% t(R))
determinant(R%*% Var_beta_est %*% t(R))
z = (R%*% Var_beta_est %*% t(R))
determinant(z)
determinant.matrix(z)
