rownames(sum.stats) = levels(df.out$country)
above_mean_bold = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
DF1 = data.frame(sum.stats[3:5])
formattable(DF1, list(
# creating own fomatting function for bold values above mean
observation = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA))),
# using inbuilt function for conditional formatting with colors
age50_54_p = color_tile('white', 'lightblue'),
area(col=c(age55_59_p)) ~ normalize_bar("lightgreen")
))
formattable(DF1, list(
# creating own fomatting function for bold values above mean
observation = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA))),
# using inbuilt function for conditional formatting with colors
age50_54_p = color_tile('white', 'lightblue'),
area(col=c(age55_59_p)) ~ normalize_bar("lightgreen")
))
df <- cbind(data.frame(id = 1:10),
do.call(cbind, lapply(1:8, function(x) rnorm(10))))
formattable(DF1, lapply(1:nrow(DF1), function(row) {
area(row, col = -1) ~ color_tile("lightpink", "lightblue")
}))
formattable(DF1, lapply(1:nrow(DF1), function(row) {
row = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))
}))
formattable(DF1, lapply(1:nrow(DF1), function() {
formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))
}))
formattable(DF1, lapply(1:nrow(DF1), function() {
formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
}))
formattable(DF1, lapply(1:nrow(DF1), function(i) {
formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
}))
formattable(DF1, lapply(1:nrow(DF1), function(i) {
row = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))
}))
df <- cbind(data.frame(id = 1:10),
do.call(cbind, lapply(1:8, function(x) rnorm(10))))
df
formattable(DF1, lapply(1:nrow(DF1), function(row) {
area(row, col = -1) ~ color_tile("lightpink", "lightblue")
})
formattable(DF1, lapply(1:nrow(DF1), function(i) {
row = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))
}))
formattable(DF1, lapply(1:nrow(DF1), function(row) {
area(row, col = -1) ~ color_tile("lightpink", "lightblue")
}))
formattable(DF1, lapply(1:nrow(DF1), function(i) {
row = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))
}))
lapply(1:nrow(DF1), function(i) {
row = formatter("span", style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))})
lapply(1:nrow(DF1)), mean)
lapply(1:nrow(DF1)), mean(row))
?lapply
sapply(DF1, mean)
sapply(1:nrow(DF1), mean)
row(DF1)
sapply(row(DF1), mean)
sapply(DF1, mean)
lapply(DF1, function(i) {
row = formatter("span", style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))})
formattable(DF1, lapply(DF1, function(i) {
row = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))
}))
formattable(DF1, lapply(DF1, function(i) {
formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))
}))
formattable(DF1, lapply(DF1, function(i) {
i = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))
}))
formattable(DF1, lapply(DF1, function() {
formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))
}))
formattable(DF1, lapply(DF1, function(){
formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))
}))
formattable(DF1, lapply(DF1, function(row) {
row = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(row), "bold", NA)))
}))
formattable(DF1, lapply(DF1, function(row) {
row = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
}))
formattable(DF1, lapply(DF1, function(x) {
row = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
}))
formattable(DF1, lapply(DF1, function(x) {
formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
}))
formattable(DF1, lapply(DF1, function() {
formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
}))
formattable(DF1, lapply(DF1, function(x) {
formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
color_tile('white', 'lightblue')
}))
formattable(DF1, lapply(DF1, function(x) {
if (is.numeric(x)){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
formattable(DF1, lapply(DF1, function(x) {
if (is.numeric(x < 1)){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
formattable(DF1, lapply(DF1, function(x) {
if (is.numeric(x > 1)){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
formattable(DF1, lapply(DF1, function(x) {
if (x > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
DF1 = data.frame(sum.stats[3:7])
formattable(DF1, lapply(DF1, function(x) {
if (x > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
formattable(DF1, lapply(DF1, function(x) {
if (max(x) > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
formattable(DF1, lapply(DF1, function(x) {
if (max(x) > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else if (x == 3) {color_tile('white', 'lightblue')}
area(x, col= -1 ) ~ normalize_bar("lightgreen")
}))
formattable(DF1, lapply(DF1, function(x) {
if (max(x) > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else if (max(x) == 3) {color_tile('white', 'lightblue')}
area(x, col= -1 ) ~ normalize_bar("lightgreen")
}))
formattable(DF1, lapply(DF1, function(x) {
if (max(x) > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else if (max(x) == 3) {color_tile('white', 'lightblue')
} else area(x, col= -1 ) ~ normalize_bar("lightgreen")
}))
formattable(DF1, lapply(DF1, function(x) {
if (max(x) > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
names(sum.stats) = c(paste0(c("Female", "Male"), " Labor Participation Share"),
"Oberservations",
paste0("Age ", rep(c("50-54", "55-59", "60-64"), 2), c(rep(" ", 3), rep(" Obs"), 3)),
paste0(c("Chronic diseases", "ADLs", "Max. grip strength"), (" (mean)")),
paste0(c("Overweight", "Obese", " Bad mental health", "Good self-perceived health"),
" (in %)"))
formattable(DF1, lapply(DF1, function(x) {
if (max(x) > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
formattable(DF, lapply(DF, function(DF, x) {
if (max(x) > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
formattable(DF, lapply(DF, function(x) {
if (max(x) > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
formattable(DF, lapply(DF, function(x) {
if (max(x) > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
formattable(DF1, lapply(DF1, function(x) {
if (max(x) > 1){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))
View(sum.stats)
x = function(DF){formattable(DF, lapply(DF, function(x) {
if (max(x) > 1 ){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))}
x(DF1
)
x = function(DF){formattable(DF, lapply(DF, function(x) {
if (max(x) > 1 ){percent(formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
)} else {color_tile('white', 'lightblue')}
}))}
DF1 = data.frame(sum.stats[10:14])
x = function(DF){formattable(DF, lapply(DF, function(x) {
if (max(x) > 1 ){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {color_tile('white', 'lightblue')}
}))}
x(DF1
)
View(df.out)
View(sum.stats)
df.out$h_maxgrip
group.percentage(df.out$h_maxgrip)
View(sum.stats)
sum.stats = data.frame(
cbind(labor.part.share.df, matrix(nrow = 11, ncol = 0)) %>%
mutate(observation  = summary(df.out$country),
age50_54_p   =   group.percentage(df.out$age50_54),
age55_59_p   =   group.percentage(df.out$age55_59),
age60_64_p   =   group.percentage(df.out$age60_64),
age50_54_n   =   age50_54_p * observation,
age55_59_n   =   age55_59_p * observation,
age60_64_n   =   age60_64_p * observation,
h_chronic_p  =   group.percentage(df.out$h_chronic),
h_maxgrip_p  =   group.percentage(df.out$h_maxgrip),
h_adla_p     =   group.percentage(df.out$h_adla),
h_overweigh_p=   group.percentage(df.out$h_overweight),
h_obese_p    =   group.percentage(df.out$h_obese),
h_badment_p  =   group.percentage(df.out$h_badmental),
h_goodsp_p   =   group.percentage(df.out$h_goodsp)))
rownames(sum.stats) = levels(df.out$country)
names(sum.stats) = c(paste0(c("Female", "Male"), " Labor Participation Share"),
"Oberservations",
paste0("Age ", rep(c("50-54", "55-59", "60-64"), 2), c(rep(" ", 3), rep(" Obs"), 3)),
paste0(c("Chronic diseases", "ADLs", "Max. grip strength"), (" (mean)")),
paste0(c("Overweight", "Obese", " Bad mental health", "Good self-perceived health"),
" (in %)"))
names(sum.stats) = c(paste0(c("Female", "Male"), " Labor Participation Share"),
"Oberservations",
paste0("Age ", rep(c("50-54", "55-59", "60-64"), 2), c(rep(" ", 3), rep(" Obs"), 3)),
paste0(c("Chronic diseases", "Max. grip strength", "ADLs"), (" (mean)")),
paste0(c("Overweight", "Obese", " Bad mental health", "Good self-perceived health"),
" (in %)"))
sum.stats.out(sum.stats)
sum.stats.out = function(DF){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1 ){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')}
}))}
sum.stats.out(sum.stats)
formattable(DF, lapply(DF[!z], function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1 ){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')}
}))}
sum.stats.out = function(DF, z){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF[!z], function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1 ){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')}
}))}
z= 3
sum.stats.out(sum.stats)
sum.stats.out(sum.stats, 3)
sum.stats.out = function(DF, z){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF[, z], function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1 ){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')}
}))}
sum.stats.out(sum.stats, 3)
sum.stats.out = function(DF, z){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x, z) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1 & x!=z){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')}
}))}
sum.stats.out(sum.stats, 3)
sum.stats.out = function(DF){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1 & x < 100){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
}  else(max(x) < 0){
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')} else{}
}))}
if (max(x) > 1 & x < 100){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else (x < 0){
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')}
if (max(x) > 1 & x < 100){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')}
if (max(x) > 1 & max(x) < 100){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')}
sum.stats.out = function(DF){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1  & max (x) < 100){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else {
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')}
}))}
sum.stats.out(sum.stats)
sum.stats.out = function(DF){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1  & max (x) < 100){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else if (max (x) <= 1){
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')} else {
}
}))}
sum.stats.out(sum.stats)
sum.stats.out = function(DF){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1  & max (x) < 100){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else if (max (x) <= 1){
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')} else { NULL
}
}))}
sum.stats.out(sum.stats)
sum.stats.out = function(DF){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1  & max (x) < 100){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else if (max (x) <= 1){
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')} else {return (x)
}
}))}
sum.stats.out(sum.stats)
sum.stats.out = function(DF){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1  & max (x) < 100){formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
} else if (max (x) <= 1){
# apply conditional formatting to percentage variables by coloring
color_tile('white', 'lightblue')} else {
formatter("span",
style = i ~ style("font-weight" =  NA))
}
}))}
sum.stats.out(sum.stats)
sum.stats.out = function(DF){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1  & max (x) < 100){
formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
# apply conditional formatting to percentage variables by coloring
} else if (max (x) <= 1){
color_tile('white', 'lightblue')
} else {
formatter("span",
style = NA)
}
}))}
sum.stats.out(sum.stats)
rep(" ", 3)
rep(" Obs"), 3)
names(sum.stats) = c(paste0(c("Female", "Male"), " Labor Participation Share"),
"Oberservations",
paste0("Age ", rep(c("50-54", "55-59", "60-64"), 2)), c(rep(" ", 3), rep(" Obs", 3)),
paste0(c("Chronic diseases", "Max. grip strength", "ADLs"), (" (mean)")),
paste0(c("Overweight", "Obese", " Bad mental health", "Good self-perceived health"),
" (in %)"))
paste0("Age ", rep(c("50-54", "55-59", "60-64"), 2), c(rep(" ", 3), rep(" Obs"), 3))
paste0("Age ", rep(c("50-54", "55-59", "60-64"), 2), c(rep(" ", 3), rep(" Obs", 3))
c(rep(" ", 3), rep(" Obs", 3))
rep(c("50-54", "55-59", "60-64"), 2)
names(sum.stats) = c(paste0(c("Female", "Male"), " Labor Participation Share"),
"Oberservations",
paste0("Age ", rep(c("50-54", "55-59", "60-64"), 2), c(rep(" ", 3), rep(" Obs", 3))),
paste0(c("Chronic diseases", "Max. grip strength", "ADLs"), (" (mean)")),
paste0(c("Overweight", "Obese", " Bad mental health", "Good self-perceived health"),
" (in %)"))
sum.stats = data.frame(
cbind(labor.part.share.df, matrix(nrow = 11, ncol = 0)) %>%
mutate(observation  = summary(df.out$country),
age50_54_p   =   group.percentage(df.out$age50_54),
age55_59_p   =   group.percentage(df.out$age55_59),
age60_64_p   =   group.percentage(df.out$age60_64),
age50_54_n   =   age50_54_p * observation,
age55_59_n   =   age55_59_p * observation,
age60_64_n   =   age60_64_p * observation,
h_chronic_p  =   group.percentage(df.out$h_chronic),
h_maxgrip_p  =   group.percentage(df.out$h_maxgrip),
h_adla_p     =   group.percentage(df.out$h_adla),
h_overweigh_p=   group.percentage(df.out$h_overweight),
h_obese_p    =   group.percentage(df.out$h_obese),
h_badment_p  =   group.percentage(df.out$h_badmental),
h_goodsp_p   =   group.percentage(df.out$h_goodsp)))
rownames(sum.stats) = levels(df.out$country)
names(sum.stats) = c(paste0(c("Female", "Male"), " Labor Participation Share"),
"Oberservations",
paste0("Age ", rep(c("50-54", "55-59", "60-64"), 2), c(rep(" ", 3), rep(" Obs", 3))),
paste0(c("Chronic diseases", "Max. grip strength", "ADLs"), (" (mean)")),
paste0(c("Overweight", "Obese", " Bad mental health", "Good self-perceived health"),
" (in %)"))
above_mean_bold = formatter("span",
style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
DF1 = data.frame(sum.stats[10:14])
sum.stats.out = function(DF){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1  & max (x) < 100){
formatter("span", style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
# apply conditional formatting to percentage variables by coloring
} else if (max (x) <= 1){
color_tile('white', 'lightblue')
# Leave number of observations unformatted
} else {
formatter("span", style = NA)
}}))}
DF1 = data.frame(sum.stats[10:14])
sum.stats.out(DF1)
sum.stats.out(sum.stats)
sum.stats.out = function(DF){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1  & max (x) < 100){
formatter("span", style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
# apply conditional formatting to percentage variables by coloring
} else if (max (x) <= 1){
color_tile('white', 'lightblue')
# Leave number of observations unformatted
} else {
formatter()
}}))}
DF1 = data.frame(sum.stats[10:14])
sum.stats.out(sum.stats)
DF1 = data.frame(sum.stats[1:4])
sum.stats.out(sum.stats)
sum.stats.out = function(DF){
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, function(x) {
# show above mean entries for non-percentage variables in bold
if (max(x) > 1  & max (x) < 100){
formatter("span", style = i ~ style("font-weight" = ifelse(i > mean(i), "bold", NA)))
# apply conditional formatting to percentage variables by coloring
} else if (max (x) <= 1){
color_tile('white', 'lightblue')
# Leave number of observations unformatted
} else {
formatter("span", style = NA)
}}))}
DF1 = data.frame(sum.stats[1:4])
sum.stats.out(sum.stats)
sum.stats.out(DF1)
DF1 = data.frame(sum.stats[3:6])
sum.stats.out(sum.stats)
sum.stats.out(DF1)
